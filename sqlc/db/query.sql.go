// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const allUsers = `-- name: AllUsers :many
SELECT id, name, email, password, is_active, otp, last_login, created_at, updated_at FROM USERS
`

func (q *Queries) AllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, allUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.IsActive,
			&i.Otp,
			&i.LastLogin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const create = `-- name: Create :one
INSERT INTO USERS(name, email, password) VALUES($1, $2, $3) RETURNING id, name, email, password, is_active, otp, last_login, created_at, updated_at
`

type CreateParams struct {
	Name     pgtype.Text
	Email    string
	Password string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (User, error) {
	row := q.db.QueryRow(ctx, create, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsActive,
		&i.Otp,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserUsingEmail = `-- name: GetUserUsingEmail :one
SELECT id, name, email, password, is_active, otp, last_login, created_at, updated_at FROM USERS WHERE email = $1
`

func (q *Queries) GetUserUsingEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserUsingEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsActive,
		&i.Otp,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserUsingOtp = `-- name: GetUserUsingOtp :one
SELECT id, name, email, password, is_active, otp, last_login, created_at, updated_at FROM USERS WHERE otp = $1
`

func (q *Queries) GetUserUsingOtp(ctx context.Context, otp pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserUsingOtp, otp)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsActive,
		&i.Otp,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const resetUserPassword = `-- name: ResetUserPassword :exec
UPDATE USERS SET password = $1, otp = '' WHERE email = $2
`

type ResetUserPasswordParams struct {
	Password string
	Email    string
}

func (q *Queries) ResetUserPassword(ctx context.Context, arg ResetUserPasswordParams) error {
	_, err := q.db.Exec(ctx, resetUserPassword, arg.Password, arg.Email)
	return err
}

const updateUserOtp = `-- name: UpdateUserOtp :exec
UPDATE USERS SET otp = $1 WHERE email = $2
`

type UpdateUserOtpParams struct {
	Otp   pgtype.Text
	Email string
}

func (q *Queries) UpdateUserOtp(ctx context.Context, arg UpdateUserOtpParams) error {
	_, err := q.db.Exec(ctx, updateUserOtp, arg.Otp, arg.Email)
	return err
}
